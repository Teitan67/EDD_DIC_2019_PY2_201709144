/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import _EDD.tablaHash;
import clases.nodoGrafo;
import java.awt.Image;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author Oscar-Laptop
 */
public class G_matriz extends javax.swing.JFrame {

    /**
     * Creates new form G_matriz
     */
    nodoGrafo Nodo;
    ArrayList nodos;
    String contenido = "";

    public G_matriz() {
        initComponents();
        abrirJson();
        generarReporteA();
        generarReporteB();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(jLabel1);

        jScrollPane2.setViewportView(jLabel2);

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(332, 332, 332)
                .addComponent(jButton1)
                .addContainerGap(345, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
           
            Thread.sleep(2000);
            mostrarImagen();
        } catch (InterruptedException ex) {
            Logger.getLogger(AVL_recorrido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    void abrirJson() {

        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JSON", "json");
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(filter);
        fc.showOpenDialog(this);
        File Archivo = fc.getSelectedFile();
        JSONParser jsonParser = new JSONParser();
        if (Archivo != null) {

            JSONParser parser = new JSONParser();

            try (Reader reader = new FileReader(Archivo.getAbsolutePath())) {

                JSONObject jsonObject = (JSONObject) parser.parse(reader);

                // loop array
                JSONArray grafo = (JSONArray) jsonObject.get("Graph");
                JSONObject nodosAux;
                JSONArray adyacencia;
                JSONObject adyacenciaAux;
                nodos = new ArrayList();
                String tem1, temp2;
                for (int i = 0; i < grafo.size(); i++) {

                    nodosAux = (JSONObject) grafo.get(i);
                    System.out.println(nodosAux.get("Node"));
                    tem1 = (String) nodosAux.get("Node");
                    adyacencia = (JSONArray) nodosAux.get("Adjacency");
                    Nodo = new nodoGrafo(tem1);

                    for (int ii = 0; ii < adyacencia.size(); ii++) {
                        adyacenciaAux = (JSONObject) adyacencia.get(ii);
                        System.out.println("    " + adyacenciaAux.get("Node"));
                        temp2 = (String) adyacenciaAux.get("Node");
                        Nodo.adyacencia.add(temp2);
                    }
                    nodos.add(Nodo);

                }

            } catch (FileNotFoundException e) {
            } catch (IOException e) {
            } catch (org.json.simple.parser.ParseException ex) {
                Logger.getLogger(m_Administrador.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    int obtenerPosicicion(String nodo) {
        int aux = -1;
        nodoGrafo tmp = null;
        for (int i = 0; i < nodos.size(); i++) {
            tmp = (nodoGrafo) nodos.get(i);
            if (tmp != null && tmp.nodo.equals(nodo)) {
                aux = i;
                break;
            }
        }
        return aux;
    }

    void generarReporteA() {
        contenido = "";
        nodoGrafo aux;
        nodoGrafo aux2;
        for (int i = 0; i < nodos.size(); i++) {
            aux = (nodoGrafo) nodos.get(i);
            contenido += "nodo" + i + "X[label=\"" + aux.nodo + "\", pos=\"" + i + ",-1!\"] \n";
            contenido += "nodo" + i + "Y[label=\"" + aux.nodo + "\", pos=\"-1," + i + "!\"] \n";
            for (int ii = 0; ii < nodos.size(); ii++) {
                aux2 = (nodoGrafo) nodos.get(ii);
                if (aux2.adyacente(aux.nodo)) {
                    contenido += "nodo" + i + "0" + ii + "[label=\"" + 1 + "\", pos=\"" + i + "," + ii + "!\"] \n";
                } else {
                    contenido += "nodo" + i + "0" + ii + "[label=\"" + 0 + "\", pos=\"" + i + "," + ii + "!\"] \n";
                }
            }
        }
        String contenido2 = ""
                + "digraph cubo{\n"
                + "    rankdir=LR;\n"
                + "    node [shape = box, color=cornflowerblue];\n"
                + "    graph [ranksep=\"1\"];\n"
                + "\n"
                + "    label=\"Matriz de adyacencia\";\n"
                + contenido
                + "\n"
                + "}";
        System.out.println(contenido2);
        generarReporte(contenido2);
       

    }

    void generarReporteB() {
        contenido = "";
        nodoGrafo aux;
        nodoGrafo aux2;
        for (int i = 0; i < nodos.size(); i++) {
            aux = (nodoGrafo) nodos.get(i);
            for (int ii = 0; ii < nodos.size(); ii++) {
                aux2 = (nodoGrafo) nodos.get(ii);
                if (aux2.adyacente(aux.nodo)) {
                    contenido += aux.nodo+"->"+aux2.nodo+" \n";
                }
            }
        }
        String contenido2 = ""
                + "digraph cubo{\n"
                + "\n"
                + "    label=\"Grafo\";\n"
                + contenido
                + "\n"
                + "}";
        System.out.println(contenido2);

        try {
            generarReporteB(contenido2);
            Thread.sleep(2000);

        } catch (InterruptedException ex) {
            Logger.getLogger(AVL_recorrido.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void mostrarImagen() {
        try {
            File file = new File("C:\\recursos\\matrix.png");
            Image img = ImageIO.read(file);
            ImageIcon icon = new ImageIcon(img);
            File file2 = new File("C:\\recursos\\grafo.png");
            Image img2 = ImageIO.read(file2);
            ImageIcon icon2 = new ImageIcon(img2);
            jLabel1.setIcon(icon);
            jLabel2.setIcon(icon2);

        } catch (IOException ex) {
            Logger.getLogger(visorReporteHash.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void generarReporte(String contenido) {
        try {
            File f = new File("C:\\recursos\\matrix.txt");
            FileWriter w = new FileWriter(f);
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter pw = new PrintWriter(bw);
            pw.write(contenido);
            pw.close();
            bw.close();
            try {
                Runtime.getRuntime().exec("C:\\recursos\\matrix.bat");
                System.out.println("REPORTE GENERADO...");
                //Runtime.getRuntime().exec(cmd1);
            } catch (IOException ioe) {
                System.out.println("No se genero" + ioe);
            }

        } catch (IOException ex) {
            Logger.getLogger(tablaHash.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void generarReporteB(String contenido) {
        try {
            File f = new File("C:\\recursos\\grafo.txt");
            FileWriter w = new FileWriter(f);
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter pw = new PrintWriter(bw);
            pw.write(contenido);
            pw.close();
            bw.close();
            try {
                Runtime.getRuntime().exec("C:\\recursos\\grafo.bat");
                System.out.println("REPORTE GENERADO...");
                //Runtime.getRuntime().exec(cmd1);
            } catch (IOException ioe) {
                System.out.println("No se genero" + ioe);
            }

        } catch (IOException ex) {
            Logger.getLogger(tablaHash.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(G_matriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(G_matriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(G_matriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(G_matriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new G_matriz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
